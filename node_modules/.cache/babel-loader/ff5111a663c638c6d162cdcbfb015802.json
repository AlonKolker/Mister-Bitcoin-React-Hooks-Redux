{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Desktop\\\\Mister-bitcoin -React day 106\\\\Mister Bitcoin-React-with-hooks-and-redux\\\\src\\\\components\\\\Market-price.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { bitcoinService } from \"../services/bitcoin.service\";\nimport Chart from \"chart.js/auto\"; //Nedded for category scale\n\nimport { useForm } from \"../customHooks/useForm\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MarketPrice() {\n  _s();\n\n  const [updatedMarketPrice, setMarketPrice] = useState(null);\n  const [timePeriod, handleChange, setTimePeriod] = useForm('10'); // const [timePeriod, setTimePeriod] = useState(\"10\")\n\n  useEffect(() => {\n    loadMarketPrice();\n  }, [timePeriod]);\n\n  const loadMarketPrice = async () => {\n    try {\n      let updatedMarketPrice = await bitcoinService.getMarketPrice(timePeriod);\n      let xVals;\n      xVals = updatedMarketPrice.values.map(val => new Date(val.x * 1000).toLocaleDateString());\n      let newData = {\n        labels: xVals,\n        datasets: [{\n          label: `BTC Market Price - ${timePeriod} Months`,\n          data: updatedMarketPrice.values.filter(val => val.y),\n          fill: true,\n          backgroundColor: \"rgba(75,192,192,0.2)\",\n          borderColor: \"rgba(75,192,192,1)\"\n        }]\n      };\n      setMarketPrice(newData);\n    } catch (err) {\n      console.log(\"err:\", err);\n    }\n  };\n\n  const onSetTimePeriod = ev => {\n    // handleChange(e)\n    const {\n      value\n    } = ev.target;\n    setTimePeriod(value); // setTimePeriod(e.target.value)\n\n    loadMarketPrice();\n  };\n\n  if (!updatedMarketPrice) return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MarketPrice\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"timePeriod\",\n      onChange: ev => handleChange(ev),\n      id: \"timePeriod\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"10\",\n        children: \"10 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"2\",\n        children: \"2 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"4\",\n        children: \"4 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"6\",\n        children: \"6 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"8\",\n        children: \"8 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"12\",\n        children: \"12 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: updatedMarketPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n} //old version without hooks\n// export class MarketPrice extends Component {\n//   state = {\n//     updatedMarketPrice: null,\n//     timePeriod: \"10\",\n//   }\n//   handleChange = (e) => {\n//     console.log(e.target.value)\n//     this.setState({ timePeriod: e.target.value })\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.timePeriod !== this.state.timePeriod) {\n//       this.loadBtcPrices()\n//     }\n//   }\n//   componentDidMount() {\n//     this.loadBtcPrices()\n//   }\n//   async loadBtcPrices() {\n//     try {\n//       let updatedMarketPrice = await bitcoinService.getMarketPrice(this.state.timePeriod)\n//       let xVals\n//       xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\n//       let newData = {\n//         labels: xVals,\n//         datasets: [\n//           {\n//             label: `BTC Market Price - ${this.state.timePeriod} Months`,\n//             data: updatedMarketPrice.values.filter((val) => val.y),\n//             fill: true,\n//             backgroundColor: \"rgba(75,192,192,0.2)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//           },\n//         ],\n//       }\n//       // console.log(newData);\n//       this.setState({ updatedMarketPrice: newData })\n//     } catch (err) {\n//       console.log(\"err:\", err)\n//     }\n//   }\n//   render() {\n//     const { updatedMarketPrice, timePeriod } = this.state\n//     if (!updatedMarketPrice) return <span>Loading</span>\n//     return (\n//       <div className='MarketPrice'>\n//  <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\n//           <option value='10'>10 Months</option>\n//           <option value='2'>2 Months</option>\n//           <option value='4'>4 Months</option>\n//           <option value='6'>6 Months</option>\n//           <option value='8'>8 Months</option>\n//           <option value='12'>12 Months</option>\n//         </select>\n//         <Line data={updatedMarketPrice} />\n//       </div>\n//     )\n//   }\n// }\n\n_s(MarketPrice, \"Q6oHPl7ZieaSIAoTPbJjGh0VKZQ=\", false, function () {\n  return [useForm];\n});\n\n_c = MarketPrice;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketPrice\");","map":{"version":3,"names":["React","Component","Line","bitcoinService","Chart","useForm","useEffect","useState","MarketPrice","updatedMarketPrice","setMarketPrice","timePeriod","handleChange","setTimePeriod","loadMarketPrice","getMarketPrice","xVals","values","map","val","Date","x","toLocaleDateString","newData","labels","datasets","label","data","filter","y","fill","backgroundColor","borderColor","err","console","log","onSetTimePeriod","ev","value","target"],"sources":["C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/src/components/Market-price.jsx"],"sourcesContent":["import React, { Component } from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport { bitcoinService } from \"../services/bitcoin.service\"\r\nimport Chart from \"chart.js/auto\" //Nedded for category scale\r\n\r\nimport { useForm } from \"../customHooks/useForm\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport function MarketPrice() {\r\n  const [updatedMarketPrice, setMarketPrice] = useState(null)\r\n  const [timePeriod,handleChange,setTimePeriod] = useForm('10')\r\n  // const [timePeriod, setTimePeriod] = useState(\"10\")\r\n\r\n  useEffect(() => {\r\n    loadMarketPrice()\r\n  }, [timePeriod])\r\n\r\n  const loadMarketPrice = async () => {\r\n    \r\n    try {\r\n      let updatedMarketPrice = await bitcoinService.getMarketPrice(timePeriod)\r\n      \r\n      let xVals\r\n      xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n      let newData = {\r\n        labels: xVals,\r\n        datasets: [\r\n          {\r\n            label: `BTC Market Price - ${timePeriod} Months`,\r\n            data: updatedMarketPrice.values.filter((val) => val.y),\r\n            fill: true,\r\n            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n          },\r\n        ],\r\n      }\r\n      setMarketPrice(newData)\r\n    } catch (err) {\r\n      console.log(\"err:\", err)\r\n    }\r\n  }\r\n\r\n  const onSetTimePeriod = (ev) => {\r\n    // handleChange(e)\r\n\r\n    const {value} = ev.target\r\n    setTimePeriod(value)\r\n    // setTimePeriod(e.target.value)\r\n    loadMarketPrice()\r\n  }\r\n\r\n  if (!updatedMarketPrice) return <span>Loading</span>\r\n  return (\r\n    <div className='MarketPrice'>\r\n           <select name='timePeriod'  onChange={(ev) =>handleChange(ev)} id=\"timePeriod\"  >\r\n        <option value='10'>10 Months</option>\r\n        <option value='2'>2 Months</option>\r\n        <option value='4'>4 Months</option>\r\n        <option value='6'>6 Months</option>\r\n        <option value='8'>8 Months</option>\r\n        <option value='12'>12 Months</option>\r\n      </select>\r\n      <Line data={updatedMarketPrice} />\r\n    </div>\r\n  )\r\n}\r\n\r\n//old version without hooks\r\n// export class MarketPrice extends Component {\r\n//   state = {\r\n//     updatedMarketPrice: null,\r\n//     timePeriod: \"10\",\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     console.log(e.target.value)\r\n//     this.setState({ timePeriod: e.target.value })\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.timePeriod !== this.state.timePeriod) {\r\n//       this.loadBtcPrices()\r\n//     }\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.loadBtcPrices()\r\n//   }\r\n//   async loadBtcPrices() {\r\n//     try {\r\n//       let updatedMarketPrice = await bitcoinService.getMarketPrice(this.state.timePeriod)\r\n//       let xVals\r\n//       xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\r\n//       let newData = {\r\n//         labels: xVals,\r\n//         datasets: [\r\n//           {\r\n//             label: `BTC Market Price - ${this.state.timePeriod} Months`,\r\n//             data: updatedMarketPrice.values.filter((val) => val.y),\r\n//             fill: true,\r\n//             backgroundColor: \"rgba(75,192,192,0.2)\",\r\n//             borderColor: \"rgba(75,192,192,1)\",\r\n//           },\r\n//         ],\r\n//       }\r\n//       // console.log(newData);\r\n//       this.setState({ updatedMarketPrice: newData })\r\n//     } catch (err) {\r\n//       console.log(\"err:\", err)\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { updatedMarketPrice, timePeriod } = this.state\r\n//     if (!updatedMarketPrice) return <span>Loading</span>\r\n//     return (\r\n//       <div className='MarketPrice'>\r\n//  <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\r\n//           <option value='10'>10 Months</option>\r\n//           <option value='2'>2 Months</option>\r\n//           <option value='4'>4 Months</option>\r\n//           <option value='6'>6 Months</option>\r\n//           <option value='8'>8 Months</option>\r\n//           <option value='12'>12 Months</option>\r\n//         </select>\r\n//         <Line data={updatedMarketPrice} />\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}