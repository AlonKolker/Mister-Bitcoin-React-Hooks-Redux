{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{Line}from\"react-chartjs-2\";import{bitcoinService}from\"../services/bitcoin.service\";import Chart from\"chart.js/auto\";//Nedded for category scale\nimport{useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var MarketPrice=function MarketPrice(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),updatedMarketPrice=_useState2[0],setMarketPrice=_useState2[1];var _useState3=useState(\"10\"),_useState4=_slicedToArray(_useState3,2),timePeriod=_useState4[0],setTimePeriod=_useState4[1];useEffect(function(){loadMarketPrice();},[timePeriod]);var loadMarketPrice=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _updatedMarketPrice,xVals,newData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return bitcoinService.getMarketPrice(timePeriod);case 3:_updatedMarketPrice=_context.sent;xVals=_updatedMarketPrice.values.map(function(val){return new Date(val.x*1000).toLocaleDateString();});newData={labels:xVals,datasets:[{label:\"BTC Market Price - \".concat(timePeriod,\" Months\"),data:_updatedMarketPrice.values.filter(function(val){return val.y;}),fill:true,backgroundColor:\"rgba(75,192,192,0.2)\",borderColor:\"rgba(75,192,192,1)\"}]};setMarketPrice(newData);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(\"err:\",_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function loadMarketPrice(){return _ref.apply(this,arguments);};}();var onSetTimePeriod=function onSetTimePeriod(ev){var value=ev.target.value;setTimePeriod(value);};if(!updatedMarketPrice)return/*#__PURE__*/_jsx(\"span\",{children:\"Loading\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"MarketPrice\",children:[/*#__PURE__*/_jsxs(\"select\",{name:\"timePeriod\",onChange:function onChange(ev){return onSetTimePeriod(ev);},id:\"timePeriod\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"10\",children:\"10 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"2\",children:\"2 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"4\",children:\"4 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"6\",children:\"6 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"8\",children:\"8 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"12\",children:\"12 Months\"})]}),/*#__PURE__*/_jsx(Line,{data:updatedMarketPrice})]});};//old version without hooks\n// export class MarketPrice extends Component {\n//   state = {\n//     updatedMarketPrice: null,\n//     timePeriod: \"10\",\n//   }\n//   handleChange = (e) => {\n//     console.log(e.target.value)\n//     this.setState({ timePeriod: e.target.value })\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.timePeriod !== this.state.timePeriod) {\n//       this.loadBtcPrices()\n//     }\n//   }\n//   componentDidMount() {\n//     this.loadBtcPrices()\n//   }\n//   async loadBtcPrices() {\n//     try {\n//       let updatedMarketPrice = await bitcoinService.getMarketPrice(this.state.timePeriod)\n//       let xVals\n//       xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\n//       let newData = {\n//         labels: xVals,\n//         datasets: [\n//           {\n//             label: `BTC Market Price - ${this.state.timePeriod} Months`,\n//             data: updatedMarketPrice.values.filter((val) => val.y),\n//             fill: true,\n//             backgroundColor: \"rgba(75,192,192,0.2)\",\n//             borderColor: \"rgba(75,192,192,1)\",\n//           },\n//         ],\n//       }\n//       // console.log(newData);\n//       this.setState({ updatedMarketPrice: newData })\n//     } catch (err) {\n//       console.log(\"err:\", err)\n//     }\n//   }\n//   render() {\n//     const { updatedMarketPrice, timePeriod } = this.state\n//     if (!updatedMarketPrice) return <span>Loading</span>\n//     return (\n//       <div className='MarketPrice'>\n//  <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\n//           <option value='10'>10 Months</option>\n//           <option value='2'>2 Months</option>\n//           <option value='4'>4 Months</option>\n//           <option value='6'>6 Months</option>\n//           <option value='8'>8 Months</option>\n//           <option value='12'>12 Months</option>\n//         </select>\n//         <Line data={updatedMarketPrice} />\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"names":["React","Line","bitcoinService","Chart","useEffect","useState","MarketPrice","updatedMarketPrice","setMarketPrice","timePeriod","setTimePeriod","loadMarketPrice","getMarketPrice","xVals","values","map","val","Date","x","toLocaleDateString","newData","labels","datasets","label","data","filter","y","fill","backgroundColor","borderColor","console","log","onSetTimePeriod","ev","value","target"],"sources":["C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/src/components/Market-price.jsx"],"sourcesContent":["import React from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport { bitcoinService } from \"../services/bitcoin.service\"\r\nimport Chart from \"chart.js/auto\" //Nedded for category scale\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\nexport const MarketPrice = () => {\r\n  const [updatedMarketPrice, setMarketPrice] = useState(null)\r\n  const [timePeriod, setTimePeriod] = useState(\"10\")\r\n\r\n  useEffect(() => {\r\n    loadMarketPrice()\r\n  }, [timePeriod])\r\n\r\n  const loadMarketPrice = async () => {\r\n    try {\r\n      let updatedMarketPrice = await bitcoinService.getMarketPrice(timePeriod)\r\n\r\n      let xVals\r\n      xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n      let newData = {\r\n        labels: xVals,\r\n        datasets: [\r\n          {\r\n            label: `BTC Market Price - ${timePeriod} Months`,\r\n            data: updatedMarketPrice.values.filter((val) => val.y),\r\n            fill: true,\r\n            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n            borderColor: \"rgba(75,192,192,1)\",\r\n          },\r\n        ],\r\n      }\r\n      setMarketPrice(newData)\r\n    } catch (err) {\r\n      console.log(\"err:\", err)\r\n    }\r\n  }\r\n\r\n  const onSetTimePeriod = (ev) => {\r\n    const value = ev.target.value\r\n    setTimePeriod(value)\r\n  }\r\n\r\n  if (!updatedMarketPrice) return <span>Loading</span>\r\n  return (\r\n    <div className='MarketPrice'>\r\n      <select name='timePeriod' onChange={(ev) => onSetTimePeriod(ev)} id='timePeriod'>\r\n        <option value='10'>10 Months</option>\r\n        <option value='2'>2 Months</option>\r\n        <option value='4'>4 Months</option>\r\n        <option value='6'>6 Months</option>\r\n        <option value='8'>8 Months</option>\r\n        <option value='12'>12 Months</option>\r\n      </select>\r\n      <Line data={updatedMarketPrice} />\r\n    </div>\r\n  )\r\n}\r\n\r\n//old version without hooks\r\n// export class MarketPrice extends Component {\r\n//   state = {\r\n//     updatedMarketPrice: null,\r\n//     timePeriod: \"10\",\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     console.log(e.target.value)\r\n//     this.setState({ timePeriod: e.target.value })\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.timePeriod !== this.state.timePeriod) {\r\n//       this.loadBtcPrices()\r\n//     }\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.loadBtcPrices()\r\n//   }\r\n//   async loadBtcPrices() {\r\n//     try {\r\n//       let updatedMarketPrice = await bitcoinService.getMarketPrice(this.state.timePeriod)\r\n//       let xVals\r\n//       xVals = updatedMarketPrice.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\r\n//       let newData = {\r\n//         labels: xVals,\r\n//         datasets: [\r\n//           {\r\n//             label: `BTC Market Price - ${this.state.timePeriod} Months`,\r\n//             data: updatedMarketPrice.values.filter((val) => val.y),\r\n//             fill: true,\r\n//             backgroundColor: \"rgba(75,192,192,0.2)\",\r\n//             borderColor: \"rgba(75,192,192,1)\",\r\n//           },\r\n//         ],\r\n//       }\r\n//       // console.log(newData);\r\n//       this.setState({ updatedMarketPrice: newData })\r\n//     } catch (err) {\r\n//       console.log(\"err:\", err)\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { updatedMarketPrice, timePeriod } = this.state\r\n//     if (!updatedMarketPrice) return <span>Loading</span>\r\n//     return (\r\n//       <div className='MarketPrice'>\r\n//  <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\r\n//           <option value='10'>10 Months</option>\r\n//           <option value='2'>2 Months</option>\r\n//           <option value='4'>4 Months</option>\r\n//           <option value='6'>6 Months</option>\r\n//           <option value='8'>8 Months</option>\r\n//           <option value='12'>12 Months</option>\r\n//         </select>\r\n//         <Line data={updatedMarketPrice} />\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"],"mappings":"yiBAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,iBAArB,CACA,OAASC,cAAT,KAA+B,6BAA/B,CACA,MAAOC,MAAP,KAAkB,eAAlB,CAAkC;AAClC,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,C,wFAGA,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAc,EAAM,CAC/B,cAA6CD,QAAQ,CAAC,IAAD,CAArD,wCAAOE,kBAAP,eAA2BC,cAA3B,eACA,eAAoCH,QAAQ,CAAC,IAAD,CAA5C,yCAAOI,UAAP,eAAmBC,aAAnB,eAEAN,SAAS,CAAC,UAAM,CACdO,eAAe,GAChB,CAFQ,CAEN,CAACF,UAAD,CAFM,CAAT,CAIA,GAAME,gBAAe,4FAAG,iNAEWT,eAAc,CAACU,cAAf,CAA8BH,UAA9B,CAFX,QAEhBF,mBAFgB,eAKpBM,KAAK,CAAGN,mBAAkB,CAACO,MAAnB,CAA0BC,GAA1B,CAA8B,SAACC,GAAD,QAAS,IAAIC,KAAJ,CAASD,GAAG,CAACE,CAAJ,CAAQ,IAAjB,EAAuBC,kBAAvB,EAAT,EAA9B,CAAR,CACIC,OANgB,CAMN,CACZC,MAAM,CAAER,KADI,CAEZS,QAAQ,CAAE,CACR,CACEC,KAAK,8BAAwBd,UAAxB,WADP,CAEEe,IAAI,CAAEjB,mBAAkB,CAACO,MAAnB,CAA0BW,MAA1B,CAAiC,SAACT,GAAD,QAASA,IAAG,CAACU,CAAb,EAAjC,CAFR,CAGEC,IAAI,CAAE,IAHR,CAIEC,eAAe,CAAE,sBAJnB,CAKEC,WAAW,CAAE,oBALf,CADQ,CAFE,CANM,CAkBpBrB,cAAc,CAACY,OAAD,CAAd,CAlBoB,+EAoBpBU,OAAO,CAACC,GAAR,CAAY,MAAZ,cApBoB,oEAAH,kBAAfpB,gBAAe,0CAArB,CAwBA,GAAMqB,gBAAe,CAAG,QAAlBA,gBAAkB,CAACC,EAAD,CAAQ,CAC9B,GAAMC,MAAK,CAAGD,EAAE,CAACE,MAAH,CAAUD,KAAxB,CACAxB,aAAa,CAACwB,KAAD,CAAb,CACD,CAHD,CAKA,GAAI,CAAC3B,kBAAL,CAAyB,mBAAO,iCAAP,CACzB,mBACE,aAAK,SAAS,CAAC,aAAf,wBACE,gBAAQ,IAAI,CAAC,YAAb,CAA0B,QAAQ,CAAE,kBAAC0B,EAAD,QAAQD,gBAAe,CAACC,EAAD,CAAvB,EAApC,CAAiE,EAAE,CAAC,YAApE,wBACE,eAAQ,KAAK,CAAC,IAAd,uBADF,cAEE,eAAQ,KAAK,CAAC,GAAd,sBAFF,cAGE,eAAQ,KAAK,CAAC,GAAd,sBAHF,cAIE,eAAQ,KAAK,CAAC,GAAd,sBAJF,cAKE,eAAQ,KAAK,CAAC,GAAd,sBALF,cAME,eAAQ,KAAK,CAAC,IAAd,uBANF,GADF,cASE,KAAC,IAAD,EAAM,IAAI,CAAE1B,kBAAZ,EATF,GADF,CAaD,CAnDM,CAqDP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}