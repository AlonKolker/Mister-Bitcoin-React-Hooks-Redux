{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Desktop\\\\Mister-bitcoin -React day 106\\\\Mister Bitcoin-React-with-hooks-and-redux\\\\src\\\\components\\\\Confirmed-transactions.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { bitcoinService } from \"../services/bitcoin.service\"; // import Chart from 'chart.js/auto';\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConfirmedTransactions = () => {\n  _s();\n\n  const [dailyTransitons, setDailyTransitons] = useState(null);\n  const [timePeriod, setTimePeriod] = useState(\"10\");\n  useEffect(() => {\n    loaddDailyTransitons();\n  }, [timePeriod]);\n\n  const loaddDailyTransitons = async () => {\n    try {\n      let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod);\n      let xVals;\n      xVals = updatedDailyTransitons.values.map(val => new Date(val.x * 1000).toLocaleDateString()); //   console.log(updatedMarketPrice.values.filter(val=>val.y));\n\n      let newData = {\n        labels: xVals,\n        datasets: [{\n          label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\n          data: updatedDailyTransitons.values.filter(val => val.y),\n          fill: true,\n          backgroundColor: \"#72585f8f\",\n          borderColor: \"#a0465c\"\n        }]\n      }; // console.log(newData);\n\n      setDailyTransitons(newData);\n    } catch (err) {\n      console.log(\"err:\", err);\n    }\n  };\n\n  const onSetTimePeriod = ev => {\n    const value = ev.target.value;\n    setTimePeriod(value);\n  };\n\n  if (!dailyTransitons) return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"confirmed-transitons\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"timePeriod\",\n      value: timePeriod,\n      onChange: ev => onSetTimePeriod(ev),\n      id: \"timePeriod\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"10\",\n        children: \"10 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"2\",\n        children: \"2 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"4\",\n        children: \"4 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"6\",\n        children: \"6 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"8\",\n        children: \"8 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"12\",\n        children: \"12 Months\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: dailyTransitons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}; // export class ConfirmedTransactions extends Component {\n//   state = {\n//     dailyTransitons: null,\n//     timePeriod: \"10\",\n//   }\n//   componentDidMount() {\n//     this.loaddDailyTransitons()\n//   }\n//   handleChange = (e) => {\n//     console.log(e.target.value)\n//     this.setState({ timePeriod: e.target.value })\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.timePeriod !== this.state.timePeriod) {\n//       this.loaddDailyTransitons()\n//     }\n//   }\n//   async loaddDailyTransitons() {\n//     try {\n//       let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod)\n//       let xVals\n//       xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\n//       let newData = {\n//         labels: xVals,\n//         datasets: [\n//           {\n//             label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\n//             data: updatedDailyTransitons.values.filter((val) => val.y),\n//             fill: true,\n//             backgroundColor: \"#72585f8f\",\n//             borderColor: \"#a0465c\",\n//           },\n//         ],\n//       }\n//       // console.log(newData);\n//       this.setState({ dailyTransitons: newData })\n//     } catch (err) {\n//       console.log(\"err:\", err)\n//     }\n//   }\n//   render() {\n//     const { dailyTransitons, timePeriod } = this.state\n//     if (!dailyTransitons) return <span>Loading</span>\n//     return (\n//       <div className=\"confirmed-transitons\">\n//         <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\n//           <option value='10'>10 Months</option>\n//           <option value='2'>2 Months</option>\n//           <option value='4'>4 Months</option>\n//           <option value='6'>6 Months</option>\n//           <option value='8'>8 Months</option>\n//           <option value='12'>12 Months</option>\n//         </select>\n//         <Line data={dailyTransitons} />\n//       </div>\n//     )\n//   }\n// }\n\n_s(ConfirmedTransactions, \"1hwdTyhEWiQHEptnfAuYd58a+/U=\");\n\n_c = ConfirmedTransactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmedTransactions\");","map":{"version":3,"names":["React","Line","bitcoinService","useEffect","useState","ConfirmedTransactions","dailyTransitons","setDailyTransitons","timePeriod","setTimePeriod","loaddDailyTransitons","updatedDailyTransitons","getConfirmedTransactions","state","xVals","values","map","val","Date","x","toLocaleDateString","newData","labels","datasets","label","data","filter","y","fill","backgroundColor","borderColor","err","console","log","onSetTimePeriod","ev","value","target"],"sources":["C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/src/components/Confirmed-transactions.jsx"],"sourcesContent":["import React from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport { bitcoinService } from \"../services/bitcoin.service\"\r\n// import Chart from 'chart.js/auto';\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\nexport const ConfirmedTransactions = ()=> {\r\n\r\n  const [dailyTransitons, setDailyTransitons] = useState(null)\r\n  const [timePeriod, setTimePeriod] = useState(\"10\")\r\n\r\n  useEffect(() => {\r\n    loaddDailyTransitons()\r\n  }, [timePeriod])\r\n\r\n\r\n  const loaddDailyTransitons = async ()=> {\r\n\r\n    try {\r\n      let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod)\r\n      let xVals\r\n      xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n      //   console.log(updatedMarketPrice.values.filter(val=>val.y));\r\n      let newData = {\r\n        labels: xVals,\r\n        datasets: [\r\n          {\r\n            label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\r\n            data: updatedDailyTransitons.values.filter((val) => val.y),\r\n            fill: true,\r\n            backgroundColor: \"#72585f8f\",\r\n            borderColor: \"#a0465c\",\r\n          },\r\n        ],\r\n      }\r\n      // console.log(newData);\r\n      setDailyTransitons(newData)\r\n    } catch (err) {\r\n      console.log(\"err:\", err)\r\n    }\r\n  }\r\n\r\n  const onSetTimePeriod = (ev) => {\r\n    const value = ev.target.value\r\n    setTimePeriod(value)\r\n  }\r\n\r\n    if (!dailyTransitons) return <span>Loading</span>\r\n    return (\r\n      <div className=\"confirmed-transitons\">\r\n        <select name='timePeriod'  value={timePeriod} onChange={(ev) => onSetTimePeriod(ev)} id='timePeriod'>\r\n          <option value='10'>10 Months</option>\r\n          <option value='2'>2 Months</option>\r\n          <option value='4'>4 Months</option>\r\n          <option value='6'>6 Months</option>\r\n          <option value='8'>8 Months</option>\r\n          <option value='12'>12 Months</option>\r\n        </select>\r\n        <Line data={dailyTransitons} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n// export class ConfirmedTransactions extends Component {\r\n//   state = {\r\n//     dailyTransitons: null,\r\n//     timePeriod: \"10\",\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.loaddDailyTransitons()\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     console.log(e.target.value)\r\n//     this.setState({ timePeriod: e.target.value })\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.timePeriod !== this.state.timePeriod) {\r\n//       this.loaddDailyTransitons()\r\n//     }\r\n//   }\r\n\r\n//   async loaddDailyTransitons() {\r\n//     try {\r\n//       let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod)\r\n//       let xVals\r\n//       xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\r\n//       let newData = {\r\n//         labels: xVals,\r\n//         datasets: [\r\n//           {\r\n//             label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\r\n//             data: updatedDailyTransitons.values.filter((val) => val.y),\r\n//             fill: true,\r\n//             backgroundColor: \"#72585f8f\",\r\n//             borderColor: \"#a0465c\",\r\n//           },\r\n//         ],\r\n//       }\r\n//       // console.log(newData);\r\n//       this.setState({ dailyTransitons: newData })\r\n//     } catch (err) {\r\n//       console.log(\"err:\", err)\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { dailyTransitons, timePeriod } = this.state\r\n//     if (!dailyTransitons) return <span>Loading</span>\r\n//     return (\r\n//       <div className=\"confirmed-transitons\">\r\n//         <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\r\n//           <option value='10'>10 Months</option>\r\n//           <option value='2'>2 Months</option>\r\n//           <option value='4'>4 Months</option>\r\n//           <option value='6'>6 Months</option>\r\n//           <option value='8'>8 Months</option>\r\n//           <option value='12'>12 Months</option>\r\n//         </select>\r\n//         <Line data={dailyTransitons} />\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}