{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{Line}from\"react-chartjs-2\";import{bitcoinService}from\"../services/bitcoin.service\";import{useEffect,useState}from\"react\";import Chart from\"chart.js/auto\";//Nedded for category scale\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ConfirmedTransactions=function ConfirmedTransactions(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),dailyTransitons=_useState2[0],setDailyTransitons=_useState2[1];var _useState3=useState(\"10\"),_useState4=_slicedToArray(_useState3,2),timePeriod=_useState4[0],setTimePeriod=_useState4[1];useEffect(function(){loaddDailyTransitons();},[timePeriod]);var loaddDailyTransitons=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var updatedDailyTransitons,xVals,newData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return bitcoinService.getConfirmedTransactions(timePeriod);case 3:updatedDailyTransitons=_context.sent;xVals=updatedDailyTransitons.values.map(function(val){return new Date(val.x*1000).toLocaleDateString();});newData={labels:xVals,datasets:[{label:\"BTC Transitions Volume -  \".concat(timePeriod,\" Months\"),data:updatedDailyTransitons.values.filter(function(val){return val.y;}),fill:true,backgroundColor:\"#72585f8f\",borderColor:\"#a0465c\"}]};setDailyTransitons(newData);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(\"err:\",_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function loaddDailyTransitons(){return _ref.apply(this,arguments);};}();var onSetTimePeriod=function onSetTimePeriod(ev){var value=ev.target.value;setTimePeriod(value);};if(!dailyTransitons)return/*#__PURE__*/_jsx(\"span\",{children:\"Loading\"});return/*#__PURE__*/_jsxs(\"div\",{className:\"confirmed-transitons\",children:[/*#__PURE__*/_jsxs(\"select\",{name:\"timePeriod\",value:timePeriod,onChange:function onChange(ev){return onSetTimePeriod(ev);},id:\"timePeriod\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"10\",children:\"10 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"2\",children:\"2 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"4\",children:\"4 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"6\",children:\"6 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"8\",children:\"8 Months\"}),/*#__PURE__*/_jsx(\"option\",{value:\"12\",children:\"12 Months\"})]}),/*#__PURE__*/_jsx(Line,{data:dailyTransitons})]});};// export class ConfirmedTransactions extends Component {\n//   state = {\n//     dailyTransitons: null,\n//     timePeriod: \"10\",\n//   }\n//   componentDidMount() {\n//     this.loaddDailyTransitons()\n//   }\n//   handleChange = (e) => {\n//     console.log(e.target.value)\n//     this.setState({ timePeriod: e.target.value })\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.timePeriod !== this.state.timePeriod) {\n//       this.loaddDailyTransitons()\n//     }\n//   }\n//   async loaddDailyTransitons() {\n//     try {\n//       let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod)\n//       let xVals\n//       xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\n//       let newData = {\n//         labels: xVals,\n//         datasets: [\n//           {\n//             label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\n//             data: updatedDailyTransitons.values.filter((val) => val.y),\n//             fill: true,\n//             backgroundColor: \"#72585f8f\",\n//             borderColor: \"#a0465c\",\n//           },\n//         ],\n//       }\n//       // console.log(newData);\n//       this.setState({ dailyTransitons: newData })\n//     } catch (err) {\n//       console.log(\"err:\", err)\n//     }\n//   }\n//   render() {\n//     const { dailyTransitons, timePeriod } = this.state\n//     if (!dailyTransitons) return <span>Loading</span>\n//     return (\n//       <div className=\"confirmed-transitons\">\n//         <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\n//           <option value='10'>10 Months</option>\n//           <option value='2'>2 Months</option>\n//           <option value='4'>4 Months</option>\n//           <option value='6'>6 Months</option>\n//           <option value='8'>8 Months</option>\n//           <option value='12'>12 Months</option>\n//         </select>\n//         <Line data={dailyTransitons} />\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"names":["React","Line","bitcoinService","useEffect","useState","Chart","ConfirmedTransactions","dailyTransitons","setDailyTransitons","timePeriod","setTimePeriod","loaddDailyTransitons","getConfirmedTransactions","updatedDailyTransitons","xVals","values","map","val","Date","x","toLocaleDateString","newData","labels","datasets","label","data","filter","y","fill","backgroundColor","borderColor","console","log","onSetTimePeriod","ev","value","target"],"sources":["C:/Users/ALON/Desktop/Mister-bitcoin -React day 106/Mister Bitcoin-React-with-hooks-and-redux/src/components/Confirmed-transactions.jsx"],"sourcesContent":["import React from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport { bitcoinService } from \"../services/bitcoin.service\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Chart from \"chart.js/auto\" //Nedded for category scale\r\n\r\n\r\nexport const ConfirmedTransactions = ()=> {\r\n\r\n  const [dailyTransitons, setDailyTransitons] = useState(null)\r\n  const [timePeriod, setTimePeriod] = useState(\"10\")\r\n\r\n  useEffect(() => {\r\n    loaddDailyTransitons()\r\n  }, [timePeriod])\r\n\r\n\r\n  const loaddDailyTransitons = async ()=> {\r\n\r\n    try {\r\n      let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(timePeriod)\r\n      let xVals\r\n      xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n      let newData = {\r\n        labels: xVals,\r\n        datasets: [\r\n          {\r\n            label: `BTC Transitions Volume -  ${timePeriod} Months`,\r\n            data: updatedDailyTransitons.values.filter((val) => val.y),\r\n            fill: true,\r\n            backgroundColor: \"#72585f8f\",\r\n            borderColor: \"#a0465c\",\r\n          },\r\n        ],\r\n      }\r\n      setDailyTransitons(newData)\r\n    } catch (err) {\r\n      console.log(\"err:\", err)\r\n    }\r\n  }\r\n\r\n  const onSetTimePeriod = (ev) => {\r\n    const value = ev.target.value\r\n    setTimePeriod(value)\r\n  }\r\n\r\n    if (!dailyTransitons) return <span>Loading</span>\r\n    return (\r\n      <div className=\"confirmed-transitons\">\r\n        <select name='timePeriod'  value={timePeriod} onChange={(ev) => onSetTimePeriod(ev)} id='timePeriod'>\r\n          <option value='10'>10 Months</option>\r\n          <option value='2'>2 Months</option>\r\n          <option value='4'>4 Months</option>\r\n          <option value='6'>6 Months</option>\r\n          <option value='8'>8 Months</option>\r\n          <option value='12'>12 Months</option>\r\n        </select>\r\n        <Line data={dailyTransitons} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n// export class ConfirmedTransactions extends Component {\r\n//   state = {\r\n//     dailyTransitons: null,\r\n//     timePeriod: \"10\",\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.loaddDailyTransitons()\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     console.log(e.target.value)\r\n//     this.setState({ timePeriod: e.target.value })\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.timePeriod !== this.state.timePeriod) {\r\n//       this.loaddDailyTransitons()\r\n//     }\r\n//   }\r\n\r\n//   async loaddDailyTransitons() {\r\n//     try {\r\n//       let updatedDailyTransitons = await bitcoinService.getConfirmedTransactions(this.state.timePeriod)\r\n//       let xVals\r\n//       xVals = updatedDailyTransitons.values.map((val) => new Date(val.x * 1000).toLocaleDateString())\r\n//       //   console.log(updatedMarketPrice.values.filter(val=>val.y));\r\n//       let newData = {\r\n//         labels: xVals,\r\n//         datasets: [\r\n//           {\r\n//             label: `BTC Transitions Volume -  ${this.state.timePeriod} Months`,\r\n//             data: updatedDailyTransitons.values.filter((val) => val.y),\r\n//             fill: true,\r\n//             backgroundColor: \"#72585f8f\",\r\n//             borderColor: \"#a0465c\",\r\n//           },\r\n//         ],\r\n//       }\r\n//       // console.log(newData);\r\n//       this.setState({ dailyTransitons: newData })\r\n//     } catch (err) {\r\n//       console.log(\"err:\", err)\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { dailyTransitons, timePeriod } = this.state\r\n//     if (!dailyTransitons) return <span>Loading</span>\r\n//     return (\r\n//       <div className=\"confirmed-transitons\">\r\n//         <select name='timePeriod'  value={timePeriod} onChange={this.handleChange}>\r\n//           <option value='10'>10 Months</option>\r\n//           <option value='2'>2 Months</option>\r\n//           <option value='4'>4 Months</option>\r\n//           <option value='6'>6 Months</option>\r\n//           <option value='8'>8 Months</option>\r\n//           <option value='12'>12 Months</option>\r\n//         </select>\r\n//         <Line data={dailyTransitons} />\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"],"mappings":"yiBAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,iBAArB,CACA,OAASC,cAAT,KAA+B,6BAA/B,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,MAAP,KAAkB,eAAlB,CAAkC;wFAGlC,MAAO,IAAMC,sBAAqB,CAAG,QAAxBA,sBAAwB,EAAK,CAExC,cAA8CF,QAAQ,CAAC,IAAD,CAAtD,wCAAOG,eAAP,eAAwBC,kBAAxB,eACA,eAAoCJ,QAAQ,CAAC,IAAD,CAA5C,yCAAOK,UAAP,eAAmBC,aAAnB,eAEAP,SAAS,CAAC,UAAM,CACdQ,oBAAoB,GACrB,CAFQ,CAEN,CAACF,UAAD,CAFM,CAAT,CAKA,GAAME,qBAAoB,4FAAG,oNAGUT,eAAc,CAACU,wBAAf,CAAwCH,UAAxC,CAHV,QAGrBI,sBAHqB,eAKzBC,KAAK,CAAGD,sBAAsB,CAACE,MAAvB,CAA8BC,GAA9B,CAAkC,SAACC,GAAD,QAAS,IAAIC,KAAJ,CAASD,GAAG,CAACE,CAAJ,CAAQ,IAAjB,EAAuBC,kBAAvB,EAAT,EAAlC,CAAR,CACIC,OANqB,CAMX,CACZC,MAAM,CAAER,KADI,CAEZS,QAAQ,CAAE,CACR,CACEC,KAAK,qCAA+Bf,UAA/B,WADP,CAEEgB,IAAI,CAAEZ,sBAAsB,CAACE,MAAvB,CAA8BW,MAA9B,CAAqC,SAACT,GAAD,QAASA,IAAG,CAACU,CAAb,EAArC,CAFR,CAGEC,IAAI,CAAE,IAHR,CAIEC,eAAe,CAAE,WAJnB,CAKEC,WAAW,CAAE,SALf,CADQ,CAFE,CANW,CAkBzBtB,kBAAkB,CAACa,OAAD,CAAlB,CAlByB,+EAoBzBU,OAAO,CAACC,GAAR,CAAY,MAAZ,cApByB,oEAAH,kBAApBrB,qBAAoB,0CAA1B,CAwBA,GAAMsB,gBAAe,CAAG,QAAlBA,gBAAkB,CAACC,EAAD,CAAQ,CAC9B,GAAMC,MAAK,CAAGD,EAAE,CAACE,MAAH,CAAUD,KAAxB,CACAzB,aAAa,CAACyB,KAAD,CAAb,CACD,CAHD,CAKE,GAAI,CAAC5B,eAAL,CAAsB,mBAAO,iCAAP,CACtB,mBACE,aAAK,SAAS,CAAC,sBAAf,wBACE,gBAAQ,IAAI,CAAC,YAAb,CAA2B,KAAK,CAAEE,UAAlC,CAA8C,QAAQ,CAAE,kBAACyB,EAAD,QAAQD,gBAAe,CAACC,EAAD,CAAvB,EAAxD,CAAqF,EAAE,CAAC,YAAxF,wBACE,eAAQ,KAAK,CAAC,IAAd,uBADF,cAEE,eAAQ,KAAK,CAAC,GAAd,sBAFF,cAGE,eAAQ,KAAK,CAAC,GAAd,sBAHF,cAIE,eAAQ,KAAK,CAAC,GAAd,sBAJF,cAKE,eAAQ,KAAK,CAAC,GAAd,sBALF,cAME,eAAQ,KAAK,CAAC,IAAd,uBANF,GADF,cASE,KAAC,IAAD,EAAM,IAAI,CAAE3B,eAAZ,EATF,GADF,CAaD,CArDI,CAyDP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}